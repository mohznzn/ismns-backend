from crewai import Agent, Task, Crew
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
import os
import re

# üîê Charger la cl√© API OpenAI
load_dotenv()

# üß† Initialiser le mod√®le
llm = ChatOpenAI(
    temperature=0,
    model="gpt-3.5-turbo"
)

# === MODE TERMINAL (optionnel si tu veux tester en local) ===
if __name__ == "__main__":
    theme = input("üéØ Th√®me du QCM (ex : Python, Scrum, SQL) : ")
    niveau = input("üìà Difficult√© (d√©butant / interm√©diaire / avanc√©) : ").lower()

    questions = []

    # Appel √† la fonction de g√©n√©ration
    questions = []

    agent_generateur = Agent(
        role="G√©n√©rateur de QCM",
        goal="Cr√©er un QCM de 5 questions avec 4 choix et la bonne r√©ponse",
        backstory="Expert p√©dagogique sp√©cialis√© dans la cr√©ation d'examens",
        verbose=True,
        allow_delegation=False,
        llm=llm
    )

    task_qcm = Task(
        description=(
            f"G√©n√®re un QCM de 5 questions sur le th√®me : {theme}, pour un niveau {niveau}. "
            "Chaque question doit avoir 4 choix (A, B, C, D) et une seule bonne r√©ponse. "
            "Format :\nQuestion 1: ...\nA) ...\nB) ...\nC) ...\nD) ...\nR√©ponse : X"
        ),
        expected_output="5 questions format√©es avec r√©ponses. Une seule bonne r√©ponse par question.",
        agent=agent_generateur
    )

    crew = Crew(
        agents=[agent_generateur],
        tasks=[task_qcm],
        verbose=True
    )

    qcm_text = str(crew.kickoff())

    # ‚úÖ Extraction correcte des questions
    pattern = r"(Question\s*\d+\s*:[^\n]+\n(?:[A-D]\)[^\n]*\n){4}R√©ponse\s*:\s*[A-D])"
    blocs = re.findall(pattern, qcm_text, re.DOTALL)

    score = 0
    user_answers = []

    print("\nüìã D√©but du test :")
    for bloc in blocs:
        match = re.search(r"R√©ponse\s*:\s*([A-D])", bloc)
        bonne_reponse = match.group(1).strip() if match else None
        question_sans_reponse = re.sub(r"R√©ponse\s*:\s*[A-D]", "", bloc).strip()

        print(f"\n{question_sans_reponse}")
        reponse_user = input("üëâ Votre r√©ponse (A, B, C ou D) : ").strip().upper()
        user_answers.append((question_sans_reponse, bonne_reponse, reponse_user))

        if reponse_user == bonne_reponse:
            print("‚úÖ Bonne r√©ponse !")
            score += 1
        else:
            print(f"‚ùå Mauvaise r√©ponse. La bonne r√©ponse √©tait : {bonne_reponse}")

    print("\nüìä R√©sultat final :")
    print(f"Score : {score} / {len(blocs)}")

    if score == len(blocs):
        print("üéâ Excellent travail, vous avez tout juste !")
    elif score >= len(blocs) // 2:
        print("üëç Bon d√©but, continuez comme √ßa pour progresser.")
    else:
        print("üìò Vous pouvez vous am√©liorer. N‚Äôh√©sitez pas √† revoir le cours et refaire le test.")

# === üéØ FONCTION POUR USAGE DANS FLASK / BACKEND ===

def generer_questions(theme, niveau):
    agent_generateur = Agent(
        role="G√©n√©rateur de QCM",
        goal="Cr√©er un QCM de 5 questions avec 4 choix et la bonne r√©ponse",
        backstory="Expert p√©dagogique sp√©cialis√© dans la cr√©ation d'examens",
        verbose=False,
        allow_delegation=False,
        llm=llm
    )

    task_qcm = Task(
        description=(
            f"G√©n√®re un QCM de 5 questions sur le th√®me : {theme}, pour un niveau {niveau}. "
            "Chaque question doit avoir 4 choix (A, B, C, D) et une seule bonne r√©ponse. "
            "Format :\nQuestion 1: ...\nA) ...\nB) ...\nC) ...\nD) ...\nR√©ponse : X"
        ),
        expected_output="5 questions format√©es avec r√©ponses. Une seule bonne r√©ponse par question.",
        agent=agent_generateur
    )

    crew_temp = Crew(
        agents=[agent_generateur],
        tasks=[task_qcm],
        verbose=False
    )

    qcm_text = str(crew_temp.kickoff())
    pattern = r"(Question\s*\d+\s*:[^\n]+\n(?:[A-D]\)[^\n]*\n){4}R√©ponse\s*:\s*[A-D])"
    blocs = re.findall(pattern, qcm_text, re.DOTALL)

    questions_list = []
    for bloc in blocs:
        match = re.search(r"R√©ponse\s*:\s*([A-D])", bloc)
        bonne_reponse = match.group(1).strip() if match else None
        lignes = bloc.strip().split("\n")
        question = lignes[0].replace("Question", "").strip(": ").strip()
        options = [l[3:].strip() for l in lignes[1:5]]

        questions_list.append({
            "question": question,
            "options": options,
            "answer": bonne_reponse
        })

    return questions_list
